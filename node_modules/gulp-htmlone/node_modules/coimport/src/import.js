//import.js
var fs = require('fs');
var path = require('path');
var fsmore = require('fsmore');
var url = require('url');

var online_cache = {};
var online_cache_dir = 'online_cache';

function uniform (css) {
    // uniform @import
  css = css
    .replace(/@import\s+url\(\s*"([^"]+)"\s*\)\s*;/g, '@import "$1";')
    .replace(/@import\s+url\(\s*\'([^\']+)\'\s*\)\s*;/g, '@import "$1";')
    .replace(/@import\s+url\(\s*([\S^\)]+)\s*\)\s*;/g, '@import "$1";')
    .replace(/@import\s*"([^"]+)"\s*;/g, '@import "$1";')
    .replace(/@import\s*\'([^\']+)\'\s*;/g, '@import "$1";');
    
  // uniform url()
  css = css
    .replace(/url\(\s*"([^"]+)"\s*\)/g, 'url($1)')
    .replace(/url\(\s*\'([^\']+)\'\s*\)/g, 'url($1)')
    .replace(/url\(\s*([\S^\)]+)\s*\)/g, 'url($1)');

    return css;
}

var uniqueId = function () {
    var i = 0;
    return function () {
        return ('' + (i ++));
    }
}();

var processCss = function (cssPath, cb) {
    var cssStr = fs.readFileSync(cssPath, {encoding:'utf8'});
    var dirname = path.dirname(cssPath);
    var online_num = 0;
    var done_num = 0;
//console.log(path.dirname('http://www.a.com/test/a.css'), )
    cssStr = uniform(cssStr);
    cssStr.replace(/@import\s*"([^"]+)"\s*;/g, function (a, b) {
        //console.log(a, b)
        if (/^http/i.test(b)) {
            online_num ++;
            var dest = path.join(dirname, online_cache_dir, uniqueId());
            fsmore.download(b, dest, function (b) {
                return function () {
                    online_cache[b] = path.relative(dirname, dest);
                    done_num ++;
                    _check();
                }
            }(b));
        }
        return a;
    });
    // no online file
    _check();

    function _check () {
        if (done_num === online_num) {
            // replace online source
            cssStr = cssStr.replace(/@import\s*"([^"]+)"\s*;/g, function (a, b) {
                var isOnline = /^http/i.test(b);
                var filepath = path.resolve(dirname, (isOnline ? online_cache[b] : b));
                var con = fs.readFileSync(filepath, {encoding:'utf8'});
                con = uniform(con);
                // fix relative path or `url`
                con = con.replace(/url\(\s*([\S^\)]+)\s*\)/g, function (c, d) {
                    if (/^http/.test(d)) return c;
                    var file_dirname = path.dirname(path.resolve(dirname, b));
                    var assetpath = path.resolve(file_dirname, d);
                    assetpath = path.relative(dirname, assetpath);
                    return 'url('+assetpath+')';
                });
                // fix relative path of `import string`
                con = con.replace(/@import\s*"([^"]+)"\s*;/g, function (e, f) {
                    if (/^http/.test(f)) return e;
                    var file_dirname = path.dirname(path.resolve(dirname, b));
                    var assetpath = path.resolve(file_dirname, f);
                    assetpath = path.relative(dirname, assetpath);
                    return '@import "'+assetpath+'";';
                });
                
                return con;
            });
            //console.log(cssStr)
            cb && cb(cssStr);
        }
    }
}


module.exports = function (root, cb) {
    var cssStr = fs.readFileSync(root, {encoding:'utf8'});
    var rootDir = path.dirname(root);
    var tempfile = path.join(rootDir, 'temp_process_import');
    fs.writeFileSync(tempfile, cssStr, {encoding:'utf8'});

    function clean () {
        fsmore.rmdirSync(tempfile);
        fsmore.rmdirSync(path.join(rootDir, online_cache_dir));
    }

    // Recursive
    function loop () {
        var tempStr = fs.readFileSync(tempfile, {encoding:'utf8'});
        if (/@import/.test(tempStr)) {
            processCss(tempfile, function (newStr) {
                fs.writeFileSync(tempfile, newStr, {encoding:'utf8'});
                loop();
            })
        } else {
            clean();
            cb && cb(tempStr);
        }
    }
    loop();
}